{% assign isFloralCareKit = false %}

    {% for item in cart.items %}
       {% if item.product.tags contains 'Required Kit' %}
          {% assign isFloralCareKit = true %}
       {% endif %}
    {% endfor %}

<section
  class="cart"
  data-section-id="{{ section.id }}"
  data-section-type="cart"
>

  <div class="cart__container">
    <h1 class="cart__title ff-heading fs-page-heading">{{ 'cart.general.title' | t }}</h1>

    {% if isFloralCareKit == false and cart.item_count != 0 %}
      <div class="cart__floralkitmessage">
        <div class="cart__floralkittext">
          <span>Uh Oh! Looks Like You're Missing A Flower Kit!</span>
        <p>Make sure you include a flower kit in your purchase.</p>
        </div>
        <button class="cart__floralkitselectbtn" id="cart__floralkitselectbtn">Select A Kit</button>
        <div class="cart__floralkitoptions" id="cart__floralkitoptions">
          <div class="cart__floralkitoption">
            <img src="//cdn.shopify.com/s/files/1/0516/8968/5154/products/Chrysal-Flower-Care-Kit-350_87c595ce_900x.jpg?v=1614718354" alt="" />
            <h3>Chrysal Floral Care Kit</h3>
            <input type="button" class="add-floral-kit-to-cart-btn" value="Add to Cart" onClick="addItemToCart(39854528725154, 1, 6912)">
            {% comment %} TODO: addItemToCart {% endcomment %}
          </div>
          <hr class="floralkitoptions_hr" />
          <div class="cart__floralkitoption">
            <img src="//cdn.shopify.com/s/files/1/0516/8968/5154/products/basic-floral-care-kit-flat-lay-350_4cd3c47f_900x.jpg?v=1614718657" alt="" />
            <h3>Basic Floral Supply Kit</h3>
            <input type="button" class="add-floral-kit-to-cart-btn" value="Add to Cart" onClick="addItemToCart(39854536327330, 1, 7525)">
          </div>
          <hr class="floralkitoptions_hr" />
          <div class="cart__floralkitoption">
            <img src="//cdn.shopify.com/s/files/1/0516/8968/5154/products/everything-floral-tool-kit-flat-lay-350_a93b728c_900x.jpg?v=1614719909" alt="" />
            <h3>Deluxe DIY Flower Design Tool Kit</h3>
            <input type="button" class="add-floral-kit-to-cart-btn" value="Add to Cart" onClick="addItemToCart(39854578761890, 1, 9589)">
          </div>
        </div>
      </div>	
    {% endif %}
 
    {%- if cart.item_count >= 1 -%}
      <form action="{{ routes.cart_url }}" method="post" data-form novalidate>
        <div class="cart__header ff-meta fs-meta">
          <div class="cart__header-product">{{ 'cart.label.product' | t }}</div>
          <div class="cart__header-quantity">{{ 'cart.label.quantity' | t }}</div>
          <div class="cart__header-total">{{ 'cart.label.total' | t }}</div>
        </div>
        {%- for item in cart.items -%}
          {% unless item.product.tags contains "hidden" %}
            <div class="cart__item">
              {% comment %} Image {% endcomment %}
              <div class="cart__item-image borders">
                {%- if item.image -%}
                  {% render 'image' with image: item.image %}
                {%- else -%}
                  {% comment %} TODO: Placeholder {% endcomment %}
                {%- endif -%}
              </div>

              {% comment %} Details {% endcomment %}
              <div class="cart__item-main">
                <div class="cart__item-details">
                  <a href="{{ item.url }}" class="cart__item-title ff-heading fs-body-base">
                    {{ item.product.title }}
                  </a>

                  {% unless item.product.has_only_default_variant %}
                    <p class="fs-body-base">{{ item.variant.title }}</p>
                  {% endunless %}

                  <div class="cart__item-price fs-body-base">
                    {% if item.original_price > item.final_price %}
                      <s>{{ item.original_price | money }}</s>
                    {% endif %}
                    {{ item.final_price | money }}
                  </div>

                  {%- assign property_size = item.properties | size -%}

                  {% if property_size > 0 %}
                    <div class="cart__item-properties fs-body-base">
                      {% for p in item.properties %}
                        {% unless p.last == blank %}
                        {% unless p.first contains '_handle' or p.first contains '_productOptions' or p.first contains '_productOptionsSurcharge' %}
                        {{ p.first }}:

                        {% if p.last contains '/uploads/' %}
                          <a href="{{ p.last }}">{{ p.last | split: '/' | last }}</a>
                        {% else %}
                          {{ p.last }}
                        {% endif %}

                        {% endunless %}
                        {% endunless %}
                      {% endfor %}
                    </div>
                  {% endif %}

                  {% if item.line_level_discount_allocations.size > 0 %}
                    <ul class="cart__line-item-discounts fs-body-small t-subdued">
                    {% for discount_allocation in item.line_level_discount_allocations %}
                      <li>{{ discount_allocation.discount_application.title }} (-{{ discount_allocation.amount | money }})</li>
                    {% endfor %}
                    </ul>
                  {% endif %}
                </div>
                
                {% if item.id == 39557608407202 %}
                <div class="cart__item-quantity" style="pointer-events: none">
                  <div class="cart__item-qty-selector">
                    <input
                      type="number"
                      name="updates[]"
                      id="updates_{{ item.key }}"
                      value="{{ item.quantity }}"
                      min="0"
                      aria-label="{{ 'cart.general.quantity' | t }}"
                      style="text-align: center; margin: 0 auto;"
                    >
                  </div>
                </div>
                {% else %}
                <div class="cart__item-quantity">

                  <div class="cart__item-qty-selector">
                    <a class="cart__item-button" href="#" data-change="decrement">
                      {% render 'icon' with icon: 'remove' %}
                    </a>
                    <input
                      type="number"
                      name="updates[]"
                      id="updates_{{ item.key }}"
                      value="{{ item.quantity }}"
                      min="0"
                      aria-label="{{ 'cart.general.quantity' | t }}"
                    >
                    <a class="cart__item-button" href="#" data-change="increment">
                      {% render 'icon' with icon: 'add' %}
                    </a>
                  </div>
                  <a class="cart-item__remove" href="{{ routes.cart_change_url }}?line={{ forloop.index }}&amp;quantity=0">{{ 'cart.general.remove' | t }}</a>
                </div>
                {% endif %}   
              </div>

              <div class="cart__item-total fs-body-base">
                {% if item.original_line_price > item.final_line_price %}
                  <s>{{ item.original_line_price | money }}</s><br/>
                {% endif %}
                {{ item.final_line_price | money }}
              </div>
            </div>
          {% endunless %}
        {%- endfor -%}

        <div class="cart__footer">
          <div class="cart__footer-left">
            {% render 'cart-event-date' %}
            {% if settings.cart_show_notes %}
              <label for="CartSpecialInstructions" class="fs-body-base">{{ 'cart.general.note' | t }}</label>
              <textarea name="note" id="CartSpecialInstructions" class="input">{{ cart.note }}</textarea>
            {% endif %}
          </div>

          <div class="cart__footer-right">
            {% comment %} Cart level discounts {% endcomment %}
            {%- if cart.cart_level_discount_applications != blank -%}
              <p class="cart__original-total fs-body-base">{{ 'cart.general.subtotal' | t }}: {{ cart.original_total_price | money }}</p>
              <ul class="cart__discounts fs-body-base">
                {%- for discount_application in cart.cart_level_discount_applications -%}
                  <li>{{ discount_application.title }} (-{{ discount_application.total_allocated_amount | money }})</li>
                {%- endfor -%}
              </ul>
            {%- endif -%}

            {% comment %} Final cart total {% endcomment %}
            <p class="ff-heading fs-heading-base">{{ cart.total_price | money }}</p>
            <p class="cart__footer-tax-note fs-body-small">{{ 'cart.general.taxes_and_shipping_at_checkout' | t }}</p>

            <div class="cart__footer-actions">
              <input type="submit" name="update" class="btn" value="{{ 'cart.general.update' | t }}">
              <input type="submit" id="checkout" name="checkout" class="btn btn--primary" value="{{ 'cart.general.checkout' | t }}" disabled>
              <div class="cart__footer-actions__msg"></div>
            </div>
          </div>

        </div>   
      </form>
    {%- else -%}

      <div class="cart__empty fs-body-large">
        {% comment %}
        Cart empty state
        {% endcomment %}
        <div class="supports-cookies">
          <p>{{ 'cart.general.empty' | t }}</p>
          <p><a class="link" href="{{ routes.collections_url }}">{{ 'cart.general.continue_shopping' | t }}</a></p>
        </div>

        {% comment %}
        Cart no cookies state
        ---------------------
        Browser cookies are required to use the cart. If cookies aren't enabled in the
        browser a message is displayed prompting the user to enable them.
        {% endcomment %}
        <div class="supports-no-cookies">
          <p>{{ 'cart.general.cookies_required' | t }}</p>
        </div>
      </div>

    {%- endif -%}

  </div>

</section>

{% comment %} <script>
$(function() {
  $("#checkout-filter").click(async (event) => {
    event.preventDefault();
    const {items} = await $.get("/cart.js", null, null, "json");
    const invalidProduct = items.find(item => !item.properties["_handle"]);
    if (invalidProduct) {
      $(".cart__footer-actions__msg")
        .html(`{{ 'cart.general.cart_property_missing_1' | t }} "${invalidProduct.product_title}".<br/> {{ 'cart.general.cart_property_missing_2' | t }}`);
      $(".cart__footer-actions__msg").addClass("visible");
    } else window.location.href = "/checkout"
  })
});
</script> {% endcomment %}

<script>
  // Script for Accordion
  var acc = document.getElementById("cart__floralkitselectbtn");
  var i;

  acc.addEventListener('click', function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if(this.classList.contains('active')) {
      panel.style.display = 'block';
      if(window.matchMedia("(min-width: 736px)").matches) {
        panel.style.maxHeight = '340px';
      } else {
        panel.style.maxHeight = panel.scrollHeight + "px";
      }
    } else {
      panel.style.display = 'none';
    } 
  });

  window.onresize = function() {
    if(acc.classList.contains('active')){
      if(window.matchMedia("(min-width: 736px)").matches){
        var kitOptions = document.getElementById('cart__floralkitoptions');
        kitOptions.style.maxHeight = '340px';
      } else {
        var kitOptions = document.getElementById('cart__floralkitoptions');
          kitOptions.style.maxHeight = kitOptions.scrollHeight + 'px';
      }
    }
  }
</script>

<script>  
async function addItemToCart(variant_id, qty, handle) {
  
  const eventDateExists = localStorage.getItem(`event-date-${'{{ customer.id }}'}`);
  var deliveryDate
  if (eventDateExists) {
    deliveryDate = eventDateExists

    const productData = {
      id: variant_id,
      quantity: qty,
      properties: deliveryDate
        ? {
            "Delivery Date": deliveryDate,
            _handle: handle,
          }
        : { _handle: handle },
    };

    jQuery.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: productData,
      dataType: 'json',
      success: function() { 
        location.reload()
      }
    });
  } else {
    if(handle == 6912) {
      window.location.href = '/products/6912';
    } else if(handle == 7525) {
      window.location.href = '/products/7525';
    } else if(handle == 9589){
      window.location.href = '/products/9589';
    }
    
  }
  
}
</script>

<script>
  window.onload = (event) => {
    const cartItems = {{cart.items | json }};
    var hasSaturdayDelivery = false;
    var itemSaturdayDeliveryDate;
    var hasSaturdayDeliveryProduct = false;
    
    var numberOfSaturdayDeliveryCharges = null;
    var numberfOfSaturdaySurcharges = null;

    cartItems.forEach(cartItem => {
      var expectedDeliveryDate = cartItem.properties['Delivery Date'];

      var itemDeliveryDate = new Date(expectedDeliveryDate);
      var deliveryDay = itemDeliveryDate.getDay();

      if(deliveryDay === 6 && cartItem.variant_id !== 39557608407202) {
        numberOfSaturdayDeliveryCharges += cartItem.quantity;
        hasSaturdayDelivery = true;
        itemSaturdayDeliveryDate = expectedDeliveryDate;
      }

      if(cartItem.variant_id === 39557608407202) {
        hasSaturdayDeliveryProduct = true;
        numberfOfSaturdaySurcharges = cartItem.quantity;
      }
    })

    if(hasSaturdayDelivery && numberOfSaturdayDeliveryCharges != numberfOfSaturdaySurcharges) {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/update.js',
        data: {updates: {39557608407202: numberOfSaturdayDeliveryCharges}},
        dataType: 'json',
        success: function() { 
          location.reload()
        }
      });
    }

    if(hasSaturdayDelivery === false && hasSaturdayDeliveryProduct) {
      jQuery.ajax({
        type: 'POST',
        url: '/cart/update.js',
        data: {updates: {39557608407202: 0}},
        dataType: 'json',
        success: function() { 
          location.reload()
        }
      });
    }

    if(hasSaturdayDelivery && hasSaturdayDeliveryProduct && numberOfSaturdayDeliveryCharges == numberfOfSaturdaySurcharges || hasSaturdayDelivery === false && hasSaturdayDeliveryProduct === false) {
      document.getElementById('checkout').disabled = false;
    }
};
</script>


{% schema %}
  {
    "name": {
      "da": "Side med indkøbskurv",
      "de": "Warenkorb-Seite",
      "en": "Cart page",
      "es": "Página del carrito de compras",
      "fi": "Ostoskorisivu",
      "fr": "Page du panier",
      "hi": "कार्ट पेज",
      "it": "Pagina del carrello",
      "ja": "カートページ",
      "ko": "카트 페이지",
      "nb": "Handlekurvside",
      "nl": "Winkelwagenpagina",
      "pt-BR": "Página do carrinho",
      "pt-PT": "Página do carrinho",
      "sv": "Varukorgssida",
      "th": "หน้าตะกร้าสินค้า",
      "zh-CN": "购物车页面",
      "zh-TW": "購物車頁面"
    },
    "settings": [
      {
        "type": "checkbox",
        "id": "cart_ajax_enable",
        "label": {
          "da": "Aktivér automatisk opdatering af indkøbskurv",
          "de": "Automatische Warenkorbaktualisierungen aktivieren",
          "en": "Enable automatic cart updates",
          "es": "Habilitar las actualizaciones automáticas del carrito de compra",
          "fi": "Ota automaattinen ostoskorin päivitykset käyttöön",
          "fr": "Activer les mises à jour automatiques",
          "hi": "स्वचालित कार्ट अपडेट सक्षम करें",
          "it": "Abilita aggiornamenti automatici carrello",
          "ja": "自動カートの更新を有効にする",
          "ko": "자동 카트 업데이트 활성화하기",
          "nb": "Aktiver automatiske oppdateringer av handlekurven",
          "nl": "Automatische winkelwagen-updates inschakelen",
          "pt-BR": "Permitir atualizações automáticas do carrinho",
          "pt-PT": "Ativar atualizações automáticas do carrinho",
          "sv": "Aktivera automatiska uppdateringar av varukorgen",
          "th": "เปิดใช้งานการอัปเดตตะกร้าสินค้าอัตโนมัติ",
          "zh-CN": "启用购物车自动更新功能",
          "zh-TW": "啟用自動更新購物車"
        },
        "info": {
          "da": "Opdaterer indkøbskurven, så snart kunden foretager ændringer",
          "de": "Aktualisiert den Warenkorb, sobald Kundenänderungen vorgenommen werden",
          "en": "Updates the cart as soon as customer changes are made",
          "es": "Actualiza el carrito de compra tan pronto como el cliente realice cambios",
          "fi": "Päivittää ostoskorin heti, kun asiakkaan muutokset on tehty",
          "fr": "Mise à jour du panier dès que les modifications apportées aux clients ont été effectuées",
          "hi": "ग्राहक के द्वारा परिवर्तन करते ही कार्ट को अपडेट हो जाता है",
          "it": "Aggiorna il carrello appena il cliente apporta le modifiche",
          "ja": "お客様が変更されるとすぐにカートを更新します",
          "ko": "고객 변경 시 카트를 업데이트합니다.",
          "nb": "Oppdaterer handlekurven så snart kundens endringer er gjort",
          "nl": "De winkelwagen wordt bijgewerkt zodra de klant wijzigingen aanbrengt",
          "pt-BR": "Atualiza o carrinho assim que o cliente faz alterações",
          "pt-PT": "Atualiza o carrinho assim que o cliente faz alterações",
          "sv": "Uppdaterar varukorgen så snart kundändringar görs",
          "th": "อัปเดตตะกร้าสินค้าเมื่อลูกค้าได้ทำการเปลี่ยนแปลง",
          "zh-CN": "客户做出更改后立即更新购物车",
          "zh-TW": "在顧客進行變更時立即更新購物車"
        },
        "default": true
      }
    ]
  }
{% endschema %}
