<!DOCTYPE html>
<html lang="{{ locale }}" dir="{{ direction }}" class="{{ checkout_html_classes }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, user-scalable=0">
    <meta name="referrer" content="origin">

    <title>{{ page_title }}</title>

    {{ content_for_header }}

    {{ checkout_stylesheets }}
    {{ checkout_scripts }}
  
  {% render 'shogun-head' %}
</head>
  <body>
    {{ skip_to_content_link }}

    <header class="banner" data-header role="banner">
      <div class="wrap">
        {{ content_for_logo }}
      </div>
    </header>

    {{ order_summary_toggle }}
    <div class="content" data-content>
      <div class="wrap">
        <div class="main">
          <header class="main__header" role="banner">
            {{ content_for_logo }}
            {{ breadcrumb }}
            {{ alternative_payment_methods }}
          </header>
          <main class="main__content" role="main">
            {{ content_for_layout }}
          </main>
          <footer class="main__footer" role="contentinfo">
            {{ content_for_footer }}
          </footer>
        </div>
        <aside class="sidebar" role="complementary">
          <div class="sidebar__header">
            {{ content_for_logo }}
          </div>
          <div class="sidebar__content">
            {{ content_for_order_summary }}
          </div>
        </aside>
      </div>
    </div>

    {{ tracking_code }}
  </body>
</html>

<script>
  // Remove Shipping Method Section from Customer Information
  var h3Tags = document.getElementsByTagName("h3");
  var searchText = "Shipping method";
	var found;
  
  for (var i = 0; i < h3Tags.length; i++) {
    if (h3Tags[i].textContent == searchText) {
      found = h3Tags[i];
      found.style.display = 'none';
      found.nextElementSibling.style.display = 'none';
      break;
    }
  }

  // Surcharge Fee
  const surchargeSummary = `
    <tr>
      <th class="total-line__name" scope="row">
		<a href="https://fiftyflowers.com/pages/shippingdetails" target="_blank">{{ 'checkout.surcharge_label' | t }}</a>
      </th>
      <td class="total-line__price">
        <span class="order-summary__emphasis skeleton-while-loading" data-checkout-surcharge-price-target=""></span>
      </td>
    </tr>  
  `;

  var waitForEl = function(selector, callback) {
    if (selector.length) {
      callback();
    } else {
      setTimeout(function() {
        waitForEl(selector, callback);
      }, 100);
    }
  };

  // check if on payment step and render surcharge box
  // insert surcharge details box
  const section = document.getElementsByClassName("section");
  waitForEl(section, function() {
    // calculate surcharge fee
    const lineItems = document.getElementsByClassName("product");
    let totalItemsQuantity = 0
    let surchargeFeeQuantity = 0;
    let surchargeLineItem;
    for(let i = 0; i < lineItems.length; i++) {
      if(lineItems[i].getAttribute("data-variant-id") !== "39576820252834" && lineItems[i].getAttribute("data-variant-id") !== "39557608407202"){
        const lineItemQuantity = parseInt(lineItems[i].querySelector("td[class='product__quantity'] span").textContent.trim());
        totalItemsQuantity = totalItemsQuantity + lineItemQuantity;
      }else if (lineItems[i].getAttribute("data-variant-id") === "39576820252834") {
        surchargeFeeQuantity = parseInt(lineItems[i].querySelector("td[class='product__quantity'] span").textContent.trim());
        surchargeLineItem = lineItems[i];
      }
    }
    // remove surcharge item from item list
    if(surchargeLineItem) {
      surchargeLineItem.parentNode.removeChild(surchargeLineItem);
    }

    // update shipping with saturday surcharge
    const shippingSpan = document.querySelector("span[data-checkout-total-shipping-target]");
    let saturdaySurcharge = 0;
    if (Shopify.Checkout.step !== "contact_information") {
      for(let i = 0; i < lineItems.length; i++) {
        if (lineItems[i].getAttribute("data-variant-id") === "39557608407202") {
          let lineItemPrice = lineItems[i].querySelector("td[class='product__price'] > span").textContent.trim();
          lineItemPrice = parseInt(lineItemPrice.replace("$", 0));
          saturdaySurcharge += lineItemPrice;
        }
      }

      setTimeout(() => {
        if (saturdaySurcharge > 0) {
          shippingSpan.innerText = "$" + parseFloat(saturdaySurcharge).toFixed(2);
          shippingSpan.setAttribute("data-checkout-total-shipping-target", saturdaySurcharge);
        }
      }, 500);
    }

    // insert summary line
    const subtotalLine = document.querySelector("tr[class='total-line total-line--subtotal']");
    let tr = document.createElement('tr');
    tr.innerHTML = surchargeSummary;
    tr.setAttribute("class", "total-line total-line--surcharge");
    insertAfter(subtotalLine, tr);

    let surchargePriceSpan = document.querySelector("span[data-checkout-surcharge-price-target]")
    const surchargeFee = 15 * totalItemsQuantity;
    surchargePriceSpan.innerText = "$" + parseFloat(surchargeFee).toFixed(2);

    // update subtotal
    setTimeout(() => {
      const subtotalSpan = subtotalLine.querySelector("span[data-checkout-subtotal-price-target]");
      const subtotalPrice = parseFloat(subtotalSpan.textContent.trim().replace("$", "").replace(",", ""));
      const updatedSubtotal = parseFloat(subtotalPrice - surchargeFee - saturdaySurcharge).toFixed(2);
      subtotalSpan.innerText = "$" + updatedSubtotal;
      subtotalSpan.setAttribute("data-checkout-subtotal-price-target", updatedSubtotal.toString().replace("$", "").replace(".", "")) 
    }, 500)


    // check if correct surcharge fee is already added
    if(surchargeFeeQuantity !== totalItemsQuantity) {
      // add surcharge item to cart
      const itemVariantId = 39576820252834;

      let formData = {
        'updates': {
          [itemVariantId]: totalItemsQuantity
        }
      };

      fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      })
      .then(response => {
        location.reload();
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }
  });

  function insertAfter(referenceNode, newNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  }
  
</script>
<script>
(function ($) {
  $(document).on("page:load page:change", function () {
    const errorClass = "field--error-plus-dynamic";
    const errorMessageSelector = ".field__message--error-plus-dynamic";

    // Check input for character limit and remove letters
    const validatePhoneNumber = function (phoneField) {
      const minChars = 10;

      const errorMessage = "{{ 'checkout.phone_field_error' | t }}";
      const numbers = phoneField.val().match(/(\d)/g) || [];
      const numbersLength = numbers.length;

      if (numbersLength !== 0 && numbersLength < minChars) {
        // Not enough characters, show error on input.
        phoneField.addClass(errorClass);
        phoneField.closest("[data-address-field]").addClass("field--error");
        if ($("#error-for-phone").length > 0) {
          $("#error-for-phone").text(errorMessage);
        } else {
          phoneField.closest("[data-address-field]").append(
            `<p class="field__message field__message--error field__message--error-plus-dynamic" id="error-for-phone">${errorMessage}</p>`
          )
        }
        
        return false;
      } else {
        // Phone number is valid. Remove errors and continue.
        phoneField.removeClass(errorClass);
        phoneField.closest("[data-address-field]").removeClass("field--error");
        phoneField.find("#error-for-phone").remove();

        return true;
      }
    };

    if (Shopify.Checkout.step === "contact_information") {
      const $phoneField = $('[name="checkout[shipping_address][phone]"]:not([aria-hidden="true"])');

      $phoneField.keydown((e) => enforceFormat(e));
      $phoneField.keyup((e) => formatToPhone(e));

      // Check for enter keypress on form and click button instead.
      $("[data-step] form").on("keypress", function (e) {
        if (e.keyCode === 13) {
          e.preventDefault();
          $(this).find('[type="submit"]').trigger("click");
        }
      });

      // Handle form submit by validating button click.
      $('[data-step] form [type="submit"]').on("click", function (e) {
        e.preventDefault();
        if (validatePhoneNumber($phoneField)) {
          $("[data-step] form").trigger("submit");
        }
      });

      function formatToPhone(event) {
        if (isModifierKey(event)) {
          return;
        }

        const input = event.target.value.replace(/\D/g, "").substring(0, 10); // First ten digits of input only
        const areaCode = input.substring(0, 3);
        const middle = input.substring(3, 6);
        const last = input.substring(6, 10);

        if (input.length > 6) {
          event.target.value = `(${areaCode}) ${middle}-${last}`;
        } else if (input.length > 3) {
          event.target.value = `(${areaCode}) ${middle}`;
        } else if (input.length > 0) {
          event.target.value = `(${areaCode}`;
        }
      }

      function isModifierKey(event) {
        const key = event.keyCode;
        return (
          event.shiftKey === true ||
          key === 35 ||
          key === 36 || // Allow Shift, Home, End
          key === 8 ||
          key === 9 ||
          key === 13 ||
          key === 46 || // Allow Backspace, Tab, Enter, Delete
          (key > 36 && key < 41) || // Allow left, up, right, down
          // Allow Ctrl/Command + A,C,V,X,Z
          ((event.ctrlKey === true || event.metaKey === true) &&
            (key === 65 || key === 67 || key === 86 || key === 88 || key === 90))
        );
      }

      function enforceFormat(event) {
        const isNumericInput = (event) => {
          const key = event.keyCode;
          return (
            (key >= 48 && key <= 57) || // Allow number line
            (key >= 96 && key <= 105) // Allow number pad
          );
        };

        // Input must be of a valid number format or a modifier key, and not longer than ten digits
        if (!isNumericInput(event) && !this._isModifierKey(event)) {
          event.preventDefault();
        }
      }
    }
  });
})(Checkout.$);
</script>